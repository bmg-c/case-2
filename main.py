from fastapi import FastAPI
from uvicorn import run as uvicorn_run
from pydantic import BaseModel
import json
from subprocess import Popen
from time import sleep


class Interfaces(BaseModel):
    screen: dict
    payments: dict
    account_linking: dict


class User(BaseModel):
    user_id: str


class Application(BaseModel):
    application_id: str


class Nlu(BaseModel):
    tokens: list
    entities: list
    intents: dict


class Markup(BaseModel):
    dangerous_context: bool


class Meta(BaseModel):
    locale: str
    timezone: str
    client_id: str
    interfaces: Interfaces


class Session(BaseModel):
    message_id: int
    session_id: str
    skill_id: str
    user: User
    application: Application
    user_id: str
    new: bool


class Request(BaseModel):
    command: str
    original_utterance: str
    nlu: Nlu
    markup: Markup
    type: str


class Data(BaseModel):
    meta: Meta
    session: Session
    request: Request
    # state: State
    version: str


app = FastAPI()


MENU = '–ü—Ä–∏–≤–µ—Ç, —è –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n' \
    '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –≥—Ä—É–ø–ø—ã.\n\n' \
    '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' \
    'üîµ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" - –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É –¥–ª—è ' \
    '–±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n' \
    'üîµ "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–≤–æ–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n' \
    'üîµ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n' \
    'üîµ "–°—Ç–æ–ø" - –∫–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞–≤—ã–∫.\n' \
    'üîµ "–í–µ—Ä–Ω—É—Ç—å—Å—è" - –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é.'
MENU_TTS = '–ü—Ä–∏–≤–µ—Ç, —è –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. ' \
    '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è", "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", ' \
    '"–°—Ç–æ–ø", "–í–µ—Ä–Ω—É—Ç—å—Å—è".'

COMMANDS = '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' \
    'üîµ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" - –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É –¥–ª—è ' \
    '–±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n' \
    'üîµ "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–≤–æ–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n' \
    'üîµ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n' \
    'üîµ "–°—Ç–æ–ø" - –∫–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞–≤—ã–∫.\n' \
    'üîµ "–í–µ—Ä–Ω—É—Ç—å—Å—è" - –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é.'
COMMANDS_TTS = '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è", "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", ' \
    '"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–°—Ç–æ–ø", "–í–µ—Ä–Ω—É—Ç—å—Å—è".'

REQUEST_GROUP_ID = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.'

GROUP_SAVED = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úîÔ∏è\n\n' \
    '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' \
    'üîµ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" - –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É –¥–ª—è ' \
    '–±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n' \
    'üîµ "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–≤–æ–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n' \
    'üîµ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n' \
    'üîµ "–°—Ç–æ–ø" - –∫–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞–≤—ã–∫.'
GROUP_SAVED_TTS = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. ' \
    '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è", "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", ' \
    '"–°—Ç–æ–ø", "–í–µ—Ä–Ω—É—Ç—å—Å—è".'

WHICH_SPECIFIC_GROUP = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'

NOT_REGISTRED = '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–π–¥–∏—Ç–µ ' \
    '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π.\n\n' \
    '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' \
    'üîµ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" - –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É' \
    ' –≥—Ä—É–ø–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n' \
    'üîµ "–ú–µ–Ω—é" - –∫–æ–º–∞–Ω–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é.'
NOT_REGISTRED_TTS = '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–π–¥–∏—Ç–µ ' \
    '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π.' \
    '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è", "–ú–µ–Ω—é".'

CHOOSE_DAY = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:\n' \
    'üîµ "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"\n' \
    'üîµ "–í—Ç–æ—Ä–Ω–∏–∫"\n' \
    'üîµ "–°—Ä–µ–¥–∞"\n' \
    'üîµ "–ß–µ—Ç–≤–µ—Ä–≥"\n' \
    'üîµ "–ü—è—Ç–Ω–∏—Ü–∞"\n' \
    'üîµ "–°—É–±–±–æ—Ç–∞"'
CHOOSE_DAY_TTS = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å.'

NOT_IN_TIME = '–°–µ—Ä–≤–µ—Ä –Ω–µ —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–æ–≤–µ—Ä–º—è.\n\n' \
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:\n' \
    'üîµ "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"\n' \
    'üîµ "–í—Ç–æ—Ä–Ω–∏–∫"\n' \
    'üîµ "–°—Ä–µ–¥–∞"\n' \
    'üîµ "–ß–µ—Ç–≤–µ—Ä–≥"\n' \
    'üîµ "–ü—è—Ç–Ω–∏—Ü–∞"\n' \
    'üîµ "–°—É–±–±–æ—Ç–∞"'
NOT_IN_TIME_TTS = '–°–µ—Ä–≤–µ—Ä –Ω–µ —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–æ–≤–µ—Ä–º—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å.'

WRONG_GROUP = '–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ.\n' \
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–í–µ—Ä–Ω—É—Ç—å—Å—è" –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.'
WRONG_GROUP_TTS = '–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ. ' \
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–í–µ—Ä–Ω—É—Ç—å—Å—è" –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.'

WRONG_COMMAND = '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n\n'
WRONG_COMMAND_TTS = '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. '

DAYS = ['1', '2', '3', '4', '5', '6']


def response_by_str(request: Data, text: str, tts: str):
    return {
        'version': request.version,
        'session': request.session,
        'response': {
            'tts': tts,
            'text': text,
            'end_session': 'false'
        },
    }


def end_session_response(request: Data):
    return {
        'version': request.version,
        'session': request.session,
        'response': {
            'tts': '–í—ã—Ö–æ–¥',
            'text': '–í—ã—Ö–æ–¥...',
            'end_session': 'true'
        },
    }


def search_obj(obj_list: list, id_name: str, id: str) -> int:
    for i in range(len(obj_list)):
        if obj_list[i][id_name] == id:
            return i
    return -1


def return_user_obj() -> dict:
    return {
        'user_id': '',
        'group_id': '',
        'session_state': ['', '']
    }


def open_file() -> object:
    with open('data/users.json', 'r') as file:
        users: object = json.loads(file.read())
    return users


def update_users(users: object):
    with open('data/users.json', 'w') as file:
        file.write(json.dumps(users))


def update_group(group_id: str):
    Popen(['python', 'schedule.py', group_id])


def change_session_state(users: object, user_index: int, new: list[str]):
    users['users'][user_index]['session_state'] = new


def day_number(day_str: str) -> int:
    days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞']
    number = 1
    for day in days:
        if day == day_str:
            return number
        number += 1
    return -1


def get_group_day_schedule(group_id: str, day: int) -> str:
    with open('data/groups.json', 'r') as file:
        groups: object = json.loads(file.read())

    group_index: int = -1
    for i in range(len(groups['groups'])):
        if groups['groups'][i]['group_id'] == group_id:
            group_index = i

    group = groups['groups'][group_index][str(day)]
    text: str = ''

    orders = ['üåí 1 –ø–∞—Ä–∞ (8:50-10:25):\n', 'üåì 2 –ø–∞—Ä–∞ (10:40-12:15):\n', 'üåî 3 –ø–∞—Ä–∞ (13:15-14:50):\n',
              'üåï 4 –ø–∞—Ä–∞ (15:00-16:35):\n', 'üåñ 5 –ø–∞—Ä–∞ (16:45-18:20):\n', 'üåó 6 –ø–∞—Ä–∞ (18:30-20:05):\n', 'üåò 7 –ø–∞—Ä–∞ (20:15-21:50):\n']

    order = 1
    while order <= 7:
        order_str = str(order)
        if group[order_str] is None:
            order += 1
            continue
        text += orders[order - 1]

        auditoriums = group[order_str]["auditoriums"]
        if len(auditoriums) > 47:
            auditoriums = auditoriums[:44] + '...'

        teachers = group[order_str]["teacher"]
        if len(teachers) > 47:
            teachers = teachers[:44] + '...'

        text += f'–ü—Ä–µ–¥–º–µ—Ç: {group[order_str]["discipline"]}\n' \
            f'–¢–∏–ø: {group[order_str]["kind"]}\n' \
            f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {auditoriums}\n' \
            f'–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: {teachers}\n'
        order += 1

    if text == '':
        text = '–í—ã—Ö–æ–¥–Ω—ã–µ!\n'

    text += '\n' \
        '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' \
        'üîµ "–î—Ä—É–≥–æ–π –¥–µ–Ω—å" - –∫–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–Ω—ë—Ç –≤–∞—Å –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è.\n' \
        'üîµ "–ú–µ–Ω—é" - –∫–æ–º–∞–Ω–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é.'
    return text


@app.post('/')
def get_request(request: Data):
    users: object = open_file()
    # with open('data.txt', 'a') as file:
    #     file.write('{}\n'.format(json.dumps(users)))

    user: dict = {
        'id': request.session.user_id,
        'index': -1,
        'text': request.request.original_utterance,
        'command': request.request.command
    }
    user['index'] = search_obj(users['users'], 'user_id', user['id'])
    text: str = ''
    tts: str = ''

    # –û–ø—Ä–µ–¥–µ—è–µ–º session_state. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–≤–∞–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞—Ç—å
    if user['index'] == -1:
        users['users'].append(return_user_obj())
        user['index'] = len(users['users']) - 1
        users['users'][user['index']]['user_id'] = user['id']
        session_state = ['menu', '']
        change_session_state(users, user['index'],
                             session_state)
    else:
        session_state = users['users'][user['index']]['session_state']

    if user['command'] == '–≤–µ—Ä–Ω—É—Ç—å—Å—è':
        text = MENU
        tts = MENU_TTS
        change_session_state(users, user['index'],
                             ['menu_option', ''])
        update_users(users)
        return response_by_str(request, text, tts)

    if request.session.new or session_state[0] == 'menu':
        text = MENU
        tts = MENU_TTS
        change_session_state(users, user['index'],
                             ['menu_option', ''])
        if users['users'][user['index']]['group_id'] != '':
            update_group(users['users'][user['index']]['group_id'])
        update_users(users)
        return response_by_str(request, text, tts)

    if session_state[0] == 'menu_option':
        if user['command'] == '–∑–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è':
            text = REQUEST_GROUP_ID
            change_session_state(users, user['index'],
                                 ['change_own_group', ''])
        elif user['command'] == '–º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            if (users['users'][user['index']]['group_id'] == ''):
                text = NOT_REGISTRED
                tts = NOT_REGISTRED_TTS
                change_session_state(users, user['index'],
                                     ['not_registred', ''])
            else:
                text = CHOOSE_DAY
                tts = CHOOSE_DAY_TTS
                change_session_state(users, user['index'],
                                     ['choose_day', users['users']
                                      [user['index']]['group_id']])
                update_group(users['users'][user['index']]['group_id'])
                sleep(0.75)
                with open('data/update_state', 'r') as state:
                    if state.read() == '-1':
                        text = WRONG_COMMAND + CHOOSE_DAY
                        tts = WRONG_COMMAND_TTS + CHOOSE_DAY_TTS
                        with open('data/update_state', 'w') as state:
                            state.write('0')
                sleep(2.25)
        elif user['command'] == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            text = WHICH_SPECIFIC_GROUP
            change_session_state(users, user['index'],
                                 ['choose_group', ''])
        elif user['command'] == '—Å—Ç–æ–ø':
            return end_session_response(request)
        else:
            text = WRONG_COMMAND + COMMANDS
            tts = WRONG_COMMAND_TTS + COMMANDS_TTS

    if session_state[0] == 'change_own_group':
        users['users'][user['index']]['group_id'] = user['text']
        update_group(user['text'])
        sleep(0.75)
        with open('data/update_state', 'r') as state:
            if state.read() == '-1':
                text = WRONG_GROUP
                tts = WRONG_GROUP_TTS
                with open('data/update_state', 'w') as state:
                    state.write('0')
            else:
                text = GROUP_SAVED
                tts = GROUP_SAVED_TTS
                change_session_state(users, user['index'],
                                     ['menu_option', ''])

    if session_state[0] == 'not_registred':
        if user['command'] == '–∑–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è':
            text = REQUEST_GROUP_ID
            change_session_state(users, user['index'],
                                 ['change_own_group', ''])
        elif user['command'] == '–º–µ–Ω—é':
            text = COMMANDS
            tts = COMMANDS_TTS
            change_session_state(users, user['index'],
                                 ['menu_option', ''])
        else:
            text = WRONG_COMMAND + COMMANDS
            tts = WRONG_COMMAND_TTS + COMMANDS_TTS

    if session_state[0] == 'choose_day':
        is_updating = '1'
        time_elapsed = 0
        while is_updating == '1' and time_elapsed < 3:
            with open('data/update_state', 'r') as state:
                is_updating = state.read()
            sleep(1)
            time_elapsed += 1

        if time_elapsed == 3 and is_updating == '1':
            text = NOT_IN_TIME
            tts = NOT_IN_TIME_TTS
        else:
            day = day_number(user['command'])
            if day == -1:
                text = WRONG_COMMAND + CHOOSE_DAY
                tts = WRONG_COMMAND_TTS + CHOOSE_DAY_TTS
            else:
                text = get_group_day_schedule(
                    session_state[1], day)
                change_session_state(users, user['index'],
                                     ['day_shown', ''])

    if session_state[0] == 'day_shown':
        if user['command'] == '–¥—Ä—É–≥–æ–π –¥–µ–Ω—å':
            text = CHOOSE_DAY
            tts = CHOOSE_DAY_TTS
            change_session_state(users, user['index'],
                                 ['choose_day', users['users']
                                  [user['index']]['group_id']])
        elif user['command'] == '–º–µ–Ω—é':
            text = COMMANDS
            tts = COMMANDS_TTS
            change_session_state(users, user['index'],
                                 ['menu_option', ''])
        else:
            text = WRONG_COMMAND + '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' \
                'üîµ "–î—Ä—É–≥–æ–π –¥–µ–Ω—å" - –∫–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–Ω—ë—Ç –≤–∞—Å –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è.\n' \
                'üîµ "–ú–µ–Ω—é" - –∫–æ–º–∞–Ω–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é.'
            tts = WRONG_COMMAND_TTS + '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: "–î—Ä—É–≥–æ–π –¥–µ–Ω—å", "–ú–µ–Ω—é"'

    if session_state[0] == 'choose_group':
        text = CHOOSE_DAY
        tts = CHOOSE_DAY_TTS
        group_id = user['text']

        update_group(group_id)
        sleep(0.75)
        with open('data/update_state', 'r') as state:
            if state.read() == '-1':
                text = WRONG_GROUP
                tts = WRONG_GROUP_TTS
                with open('data/update_state', 'w') as state:
                    state.write('0')
            else:
                sleep(2.25)
                change_session_state(users, user['index'],
                                     ['choose_day', group_id])

    if tts == '':
        tts = text

    update_users(users)
    return response_by_str(request, text, tts)


if __name__ == '__main__':
    uvicorn_run('main:app', reload=True)
