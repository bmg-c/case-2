from fastapi import FastAPI
import uvicorn
from pydantic import BaseModel
import json
import subprocess
import time


class Interfaces(BaseModel):
    screen: dict
    payments: dict
    account_linking: dict


class User(BaseModel):
    user_id: str


class Application(BaseModel):
    application_id: str


class Nlu(BaseModel):
    tokens: list
    entities: list
    intents: dict


class Markup(BaseModel):
    dangerous_context: bool


class Meta(BaseModel):
    locale: str
    timezone: str
    client_id: str
    interfaces: Interfaces


class Session(BaseModel):
    message_id: int
    session_id: str
    skill_id: str
    user: User
    application: Application
    user_id: str
    new: bool


class Request(BaseModel):
    command: str
    original_utterance: str
    nlu: Nlu
    markup: Markup
    type: str


# class State(BaseModel):
#     session: str


class Data(BaseModel):
    meta: Meta
    session: Session
    request: Request
    # state: State
    version: str


app = FastAPI()


START = '–ü—Ä–∏–≤–µ—Ç, —è –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n' \
    '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –≥—Ä—É–ø–ø—ã.\n' \
    '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' \
    'üîµ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" - –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É –¥–ª—è ' \
    '–±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n' \
    'üîµ "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–≤–æ–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n' \
    'üîµ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n' \
    'üîµ "–°—Ç–æ–ø" - –∫–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞–≤—ã–∫.'

COMMANDS = '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' \
    'üîµ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" - –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É –¥–ª—è ' \
    '–±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n' \
    'üîµ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n' \
    'üîµ "–°—Ç–æ–ø" - –∫–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞–≤—ã–∫.'

REQUEST_GROUP_ID = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.'

GROUP_SAVED = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úîÔ∏è\n' \
    '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' \
    'üîµ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" - –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É –¥–ª—è ' \
    '–±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n' \
    'üîµ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n' \
    'üîµ "–°—Ç–æ–ø" - –∫–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞–≤—ã–∫.'

WHICH_SPECIFIC_GROUP = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?' \

NOT_REGISTRED = '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–π–¥–∏—Ç–µ ' \
    '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π.\n' \
    'üîµ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" - –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É' \
    ' –≥—Ä—É–ø–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n' \
    'üîµ "–ú–µ–Ω—é" - –∫–æ–º–∞–Ω–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é.'

CHOOSE_DAY = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:\n' \
    'üîµ "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"\n' \
    'üîµ "–í—Ç–æ—Ä–Ω–∏–∫"\n' \
    'üîµ "–°—Ä–µ–¥–∞"\n' \
    'üîµ "–ß–µ—Ç–≤–µ—Ä–≥"\n' \
    'üîµ "–ü—è—Ç–Ω–∏—Ü–∞"\n' \
    'üîµ "–°—É–±–±–æ—Ç–∞"'

f = 'üåí 1 –ø–∞—Ä–∞ (8:50-10:25):\n' \
    '–ü—Ä–µ–¥–º–µ—Ç: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–¢–∏–ø: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–ê—É–¥–∏—Ç–æ—Ä–∏—è: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: (–¥–∞–Ω–Ω—ã–µ)\n' \
    'üåì 2 –ø–∞—Ä–∞ (10:40-12:15):\n' \
    '–ü—Ä–µ–¥–º–µ—Ç: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–¢–∏–ø: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–ê—É–¥–∏—Ç–æ—Ä–∏—è: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: (–¥–∞–Ω–Ω—ã–µ)\n' \
    'üåî 3 –ø–∞—Ä–∞ (13:15-14:50):\n' \
    '–ü—Ä–µ–¥–º–µ—Ç: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–¢–∏–ø: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–ê—É–¥–∏—Ç–æ—Ä–∏—è: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: (–¥–∞–Ω–Ω—ã–µ)\n' \
    'üåï 4 –ø–∞—Ä–∞ (15:00-16:35):\n' \
    '–ü—Ä–µ–¥–º–µ—Ç: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–¢–∏–ø: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–ê—É–¥–∏—Ç–æ—Ä–∏—è: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: (–¥–∞–Ω–Ω—ã–µ)\n' \
    'üåñ 5 –ø–∞—Ä–∞ (16:45-18:20):\n' \
    '–ü—Ä–µ–¥–º–µ—Ç: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–¢–∏–ø: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–ê—É–¥–∏—Ç–æ—Ä–∏—è: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: (–¥–∞–Ω–Ω—ã–µ)\n' \
    'üåó 6 –ø–∞—Ä–∞ (18:30-20:05):\n' \
    '–ü—Ä–µ–¥–º–µ—Ç: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–¢–∏–ø: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–ê—É–¥–∏—Ç–æ—Ä–∏—è: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: (–¥–∞–Ω–Ω—ã–µ)\n' \
    'üåò 7 –ø–∞—Ä–∞ (20:15-21:50):\n' \
    '–ü—Ä–µ–¥–º–µ—Ç: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–¢–∏–ø: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–ê—É–¥–∏—Ç–æ—Ä–∏—è: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: (–¥–∞–Ω–Ω—ã–µ)\n' \
    '\n' \
    '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' \
    'üîµ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –¥–Ω—è" - –∫–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–Ω—ë—Ç –≤–∞—Å –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è.\n' \
    'üîµ "–ú–µ–Ω—é" - –∫–æ–º–∞–Ω–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é.'


def response_by_str(request, text: str):
    return {
        'version': request.version,
        'session': request.session,
        'response': {
            'text': text,
            'end_session': 'false'
        },
    }


def search_obj(obj_list: list, id_name: str, id: str) -> int:
    for i in range(len(obj_list)):
        if obj_list[i][id_name] == id:
            return i
    return -1


def return_user_obj():
    return {
        'user_id': '',
        'group_id': '',
        'session_state': ['', '']
    }


def update_users(users):
    with open('data/users.json', 'w') as file:
        file.write(json.dumps(users))


def update_group(group_id: str):
    subprocess.Popen(['python', 'schedule.py', group_id])


def change_session_state(users, user_index: int, new: list[str]):
    users['users'][user_index]['session_state'] = new
    update_users(users)


@app.post('/')
def get_request(request: Data):
    print("saka")
    with open('data/users.json', 'r') as file:
        users: object = json.loads(file.read())
    with open('data.txt', 'a') as file:
        file.write('{}\n'.format(json.dumps(users)))

    user = {
        'id': request.session.user_id,
        'index': -1,
        'text': request.request.original_utterance,
        'command': request.request.command
    }
    user['index'] = search_obj(users['users'], 'user_id', user['id'])
    text: str = ''

    # –û–ø—Ä–µ–¥–µ—è–µ–º session_state. –ï—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞—Ç—å
    if user['index'] == -1:
        users['users'].append(return_user_obj())
        user['index'] = len(users['users']) - 1
        users['users'][user['index']]['user_id'] = user['id']
        session_state = ['menu', '']
        change_session_state(users, user['index'],
                             session_state)
    else:
        session_state = users['users'][user['index']]['session_state']

    if request.session.new or session_state[0] == 'menu':
        text = START
        change_session_state(users, user['index'],
                             ['menu_option', ''])
        if users['users'][user['index']]['group_id'] != '':
            update_group(users['users'][user['index']]['group_id'])
        return response_by_str(request, text)

    if session_state[0] == 'menu_option':
        if user['command'] == '–∑–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è':
            text = REQUEST_GROUP_ID
            change_session_state(users, user['index'],
                                 ['change_own_group', ''])
            return response_by_str(request, text)
        if user['command'] == '–º–æ—è –≥—Ä—É–ø–ø–∞':
            if (users['users'][user['index']]['group_id'] == ''):
                text = NOT_REGISTRED
                change_session_state(users, user['index'],
                                     ['not_registred', ''])
                return response_by_str(request, text)
            else:
                text = CHOOSE_DAY
                change_session_state(users, user['index'],
                                     ['choose_day', ''])
                return response_by_str(request, text)

    if session_state[0] == 'change_own_group':
        text = GROUP_SAVED
        users['users'][user['index']]['group_id'] = user['text']
        change_session_state(users, user['index'],
                             ['menu_option', ''])
        return response_by_str(request, text)

    if session_state[0] == 'not_registred':
        if user['command'] == '–∑–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è':
            text = REQUEST_GROUP_ID
            change_session_state(users, user['index'],
                                 ['change_own_group', ''])
            return response_by_str(request, text)
        if user['command'] == '–º–µ–Ω—é':
            text = START
            change_session_state(users, user['index'],
                                 ['menu_option'])
            return response_by_str(request, text)


if __name__ == '__main__':
    uvicorn.run('main:app', reload=True)
